{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","timer","setTimer","status","setStatus","useEffect","oversubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","className","Date","toISOString","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAqDeA,MA/Cf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACJC,EADI,KACGC,EADH,OAEiBF,mBAAS,SAF1B,mBAEJG,EAFI,KAEIC,EAFJ,KAkCX,OA9BAC,qBAAU,WACN,IAAMC,EAAiB,IAAIC,IAQ3B,OAPAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACQ,UAAXR,GACAD,GAAS,SAAAU,GAAG,OAAIA,EAAM,UAG3B,kBAAMN,EAAeO,UAC7B,CAACV,IAqBA,sBAAKW,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,cAAwB,IAAIC,KAAKd,GAAOe,cAAcC,MAAM,GAAI,OAChE,sBAAKH,UAAU,mBAAf,UACI,wBAAQA,UAAU,eAAeI,QAtB/B,WACVd,EAAU,UAqBF,mBACA,wBAAQU,UAAU,cAAcI,QAT/B,WACTd,EAAU,SAQF,kBACA,wBAAQU,UAAU,cAAcI,QApB/B,WACTd,EAAU,QACVF,EAAS,IAkBD,kBACA,wBAAQY,UAAU,eAAeI,QAhB/B,WACVd,EAAU,SACVF,EAAS,IAcD,0BCnCDiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.38d7b0d2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.sass\";\nimport {useEffect, useState} from \"react\";\nimport {interval, Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\n\nfunction App() {\n    const [timer, setTimer] = useState(0);\n    const [status, setStatus] = useState(\"reset\");\n\n    useEffect(() => {\n        const oversubscribe$ = new Subject();\n        interval(700)\n            .pipe(takeUntil(oversubscribe$))\n            .subscribe(() => {\n                if (status === \"start\") {\n                    setTimer(val => val + 1000);\n                }\n            });\n        return () => oversubscribe$.next();\n    }, [status]);\n\n    const start = () => {\n        setStatus(\"start\");\n    };\n\n    const stop = () => {\n        setStatus(\"stop\");\n        setTimer(0);\n    };\n\n    const reset = () => {\n        setStatus(\"reset\");\n        setTimer(0)\n    };\n\n    const wait = () => {\n        setStatus(\"wait\");\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"time\"> {new Date(timer).toISOString().slice(11, 19)}</div>\n            <div className=\"buttonsContainer\">\n                <button className=\"btn startBtn\" onClick={start}>start</button>\n                <button className=\"btn waitBtn\" onClick={wait}>Wait</button>\n                <button className=\"btn stopBtn\" onClick={stop}>stop</button>\n                <button className=\"btn resetBtn\" onClick={reset}>Reset</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}